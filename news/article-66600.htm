<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashmetagithub.github.io/news/article-66600.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>【C++】类和对象 — 初识类和对象（上篇）</title>
        <meta name="description" content="文章目录  ????前言 1. 类的定义和使用方法     1.1 类的定义方式： 1.2 类的访问限定符及封装： 1.3 类的使用方法：     2. 结构体和类的内存对齐     2.1 如何内存" />
        <link rel="icon" href="/assets/website/img/clashmetagithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Clash Meta Github节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashmetagithub.github.io/news/article-66600.htm" />
    <meta property="og:site_name" content="Clash Meta Github节点订阅官网" />
    <meta property="og:title" content="【C++】类和对象 — 初识类和对象（上篇）" />
    <meta property="og:image" content="https://clashmetagithub.github.io/uploads/20240815-1/af57e05ee02ed6f459421543533f5b1e.webp" />
        <meta property="og:release_date" content="2025-03-03T08:14:48" />
    <meta property="og:updated_time" content="2025-03-03T08:14:48" />
        <meta property="og:description" content="文章目录  ????前言 1. 类的定义和使用方法     1.1 类的定义方式： 1.2 类的访问限定符及封装： 1.3 类的使用方法：     2. 结构体和类的内存对齐     2.1 如何内存" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="【C++】类和对象 — 初识类和对象（上篇）">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/css/clashmetagithub/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/clashmetagithub/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/clashmetagithub/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/clashmetagithub/jquery.fancybox.min.css">
    <link rel="stylesheet" href="/assets/website/fonts/clashmetagithub/icomoon/style.css">
    <link rel="stylesheet" href="/assets/website/fonts/clashmetagithub/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/clashmetagithub/aos.css">
    <link rel="stylesheet" href="/assets/website/css/clashmetagithub/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-V4QMXPZG4V"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-V4QMXPZG4V');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-spy="scroll" data-target=".site-navbar-target" data-offset="100" data-page="detail">
        <div class="lines-wrap">
        <div class="lines-inner">
            <div class="lines"></div>
        </div>
    </div>
    <!-- END lines -->
    <div class="site-mobile-menu site-navbar-target">
        <div class="site-mobile-menu-header">
            <div class="site-mobile-menu-close">
                <span class="icofont-close js-menu-toggle"></span>
            </div>
        </div>
        <div class="site-mobile-menu-body"></div>
    </div>
    <nav class="site-nav dark js-site-navbar mb-5 site-navbar-target">
        <div class="container">
            <div class="site-navigation">
                                <a href="/" class="logo m-0 float-left">ClashMeta<span class="text-primary">Github</span></span></a>
                
                <ul class="js-clone-nav d-none d-lg-inline-block site-menu float-left">
                                        <li><a href="/" class="nav-link">首页</a></li>
                                        <li><a href="/free-nodes/" class="nav-link">免费节点</a></li>
                                        <li><a href="/paid-subscribe/" class="nav-link">推荐机场</a></li>
                                        <li><a href="/client.htm" class="nav-link">客户端</a></li>
                                        <li><a href="/news/" class="nav-link">新闻资讯</a></li>
                                    </ul>
            </div>
        </div>
    </nav>
    <div class="untree_co-hero" id="home-section">
        <div class="container">
            <div class="row align-items-center" style="height: 380px;overflow: hidden;padding-top: 0;">
                <div class="col-12">
                    <div class="dots"></div>
                    <div class="row align-items-center">
                        <div class="col-lg-7 ml-auto order-lg-2" data-aos="fade-right" data-aos-delay="400">
                            <img src="/assets/website/img/clashmetagithub/market-launch-pana.svg" alt="Image" class="img-fluid">
                        </div> <!-- /.col-lg-6 -->
                        <div class="col-lg-5">
                            <h1 class="heading" data-aos="fade-up" data-aos-delay="0">【C++】类和对象 — 初识类和对象（上篇）</h1>
                            <div class="excerpt" data-aos="fade-up" data-aos-delay="100">
                                <p>
                                    <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                                </p>
                            </div> <!-- /.excerpt -->
                        </div> <!-- /.col-lg-5 -->
                    </div>
                </div>
            </div> <!-- /.row -->
        </div> <!-- /.container -->
    </div> <!-- /.untree_co-hero -->
    <div class="untree_co-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-tomorrow-night"> <div class="toc"> <h3>文章目录</h3> <ul> <li><a href="#x1F4D6_1" rel="nofollow">????前言</a></li> <li><a href="#1__7" rel="nofollow">1. 类的定义和使用方法</a></li> <li> <ul> <li> <ul> <li><a href="#11__8" rel="nofollow">1.1 类的定义方式：</a></li> <li><a href="#12__15" rel="nofollow">1.2 类的访问限定符及封装：</a></li> <li><a href="#13__96" rel="nofollow">1.3 类的使用方法：</a></li> </ul> </li> </ul> </li> <li><a href="#2__194" rel="nofollow">2. 结构体和类的内存对齐</a></li> <li> <ul> <li> <ul> <li><a href="#21__195" rel="nofollow">2.1 如何内存对齐：</a></li> <li><a href="#22__228" rel="nofollow">2.2 成员函数存储位置：</a></li> </ul> </li> </ul> </li> <li><a href="#3_this_322" rel="nofollow">3. this指针</a></li> <li> <ul> <li> <ul> <li><a href="#31_this_323" rel="nofollow">3.1 this指针的使用和特性：</a></li> <li><a href="#32_this_397" rel="nofollow">3.2 两道面试题巩固this指针：</a></li> <li><a href="#33_this_475" rel="nofollow">3.3 this指针的存储位置：</a></li> </ul> </li> </ul> </li> </ul> </div> </h1> <ol> <li> <p><strong>C++是基于面向对象的</strong>，关注的是<strong>对象</strong>，将一件事情拆分成不同的对象，靠对象之间的交互完成。</p> </li> <li> <p><strong><font color="green">类的引入：</font></strong><br /><strong>C语言结构体中只能定义变量，在C++中，结构体内不仅可以定义变量，也可以定义函数。</strong> 比如：之前在数据结构初阶中，<strong>用C语言方式实现的栈，结构体中只能定义变量</strong>；现在以C++方式实现，<strong>会发现struct中也可以定义函数。</strong></p> </li> </ol> <hr/> </h1> <h3> <a id="11__8" rel="nofollow"></a>1.1 类的定义方式：</h3> <p>1.<strong>声明和定义全部放在类体中</strong>，需注意：成员函数如果在类中定义，编译器可能会<strong>将其当成内联函数处理。</strong><br /><img decoding="async" src="http://img.555519.xyz/uploads/20230119/fa0e1c7794b0dc31fa5c42942cfc28f8.jpg" alt="【C++】类和对象 — 初识类和对象（上篇）"><br /> 2. <strong>类声明放在.h文件中</strong>，成员函数定义放在.cpp文件中，注意：<strong>成员函数名前需要加类名::</strong></p> <p><font color="blue"><strong>这时候要指定类域：</strong></font><br /><img decoding="async" src="http://img.555519.xyz/uploads/20230119/07ae4d73719ecf40984ea524734358eb.jpg" alt="【C++】类和对象 — 初识类和对象（上篇）"></p> <h3> <a id="12__15" rel="nofollow"></a>1.2 类的访问限定符及封装：</h3> <p>1.<strong>访问限定符：</strong></p> <p><strong>访问限定符说明：</strong></p> <ol> <li> <strong>public</strong>修饰的成员在<strong>类外可以直接被访问</strong> </li> <li> <strong>protected和private</strong>修饰的成员在类外<strong>不能直接被访问</strong>(此处protected和private是类似的)</li> <li>访问权限作用域<strong>从该访问限定符出现的位置开始直到下一个访问限定符出现时为止</strong> </li> <li>如果后面没有访问限定符，<strong>作用域就到 } 即类结束</strong>。</li> </ol> <p><font color="red"><strong>注意：访问限定符只在编译时有用，当数据映射到内存后，没有任何访问限定符上的区别</strong></font></p> <p>2.<strong>封装：</strong></p> <p>在C++语言中实现封装，<strong>可以通过类将数据以及操作数据的方法进行有机结合，通过访问权限来隐藏对象内部实现细节，控制哪些方法可以在类外部直接被使用。</strong></p> <ul> <li> <strong>C语言</strong>，数据和方法是分离的 - <strong>分离最大的问题在于太过自由</strong> </li> <li>C++通过定义让用的人使用更规范</li> <li> <strong>高内聚，低耦合</strong>，C语言也可以实现这样规范的做法，<strong>但是要看写代码的人的素养高不高</strong> </li> <li>在项目里面关联关系越高影响越不好</li> </ul> <p><font color="blue"><strong>用类定义一个栈的对象演示：</strong></font></p> <pre><code class="prism language-cpp"><span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">private</span><span class="token operator">:</span> 	<span class="token keyword">void</span> <span class="token function">Checkcapaicty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>  	<span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>  	<span class="token keyword">int</span> <span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>  <span class="token keyword">private</span><span class="token operator">:</span> 	<span class="token keyword">int</span><span class="token operator">*</span> _a<span class="token punctuation">;</span> 	<span class="token keyword">int</span> _top<span class="token punctuation">;</span> 	<span class="token keyword">int</span> _capacity<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Stack st<span class="token punctuation">;</span><span class="token comment">//这才是定义，这里开辟空间了</span>  	st<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	cout <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	<span class="token comment">//cout &lt;&lt; st._a[st._top] &lt;&lt; endl;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p><font color="green"><strong>我们定义栈的时候，top指针的指向有两种方式：</strong></font></p> <ul> <li>一种是指向栈顶元素的下一个元素另一种是指向栈顶元素</li> </ul> <p><font color="green"><strong>当我们要访问栈顶元素的时候，就有两种方式访问：</strong></font></p> <ul> <li>对应上面的：一种栈顶元素下标是top - 1，另一种就是栈顶元素下标是top</li> </ul> <p><font color="red"><strong>越界的风险：</strong></font><br /> 这时候要是用C语言写的代码，就要对写代码的人有很高的素养要求，当访问的是空栈的栈顶时，若是采用：<strong>st._a[st._top]</strong>，在top是指向栈顶元素的时候就<strong>会出现越界的风险</strong>，因为此时<strong>top指向的是-1的地址处</strong></p> <blockquote> <p>而C++则是使用st.Top()，将取栈顶元素封在成一个类的成员函数，只能通过这种方法获取栈顶元素，<strong>st._a[st._top]</strong> 若像这样子的话是不可以的，<strong>因为被private修饰过了不能在类外直接访问</strong>。</p> <hr/> <p>C语言也能将获取栈顶元素封装成一个函数，但是C语言还可以采用<strong>st._a[st._top]</strong> 这种<strong>方法获取栈顶元素，方法和数据分离它很灵活，过于自由</strong>，不像C++的有访问权限将方法定死，这样就会有可能不规范的操作造成不必要的麻烦。</p> </blockquote> <p><font color="green"><strong>C++封装的意义是：更好的管理</strong></font></p> <p><font color="purple"><strong>C++通过类将数据以及操作数据的方法进行有机结合，通过访问权限来隐藏对象内部实现细节，控制哪些方法可以在类外部直接被使用.</strong></font></p> <p>3.<strong>类的作用域：</strong></p> <ul> <li>类定义了一个新的作用域 <strong>（类域）</strong>，类的所有成员都在类的作用域中。</li> <li>在类体外定义成员时，<strong>需要使用 :: 作用域操作符指明成员属于哪个类域</strong>。</li> <li>要在类里面找一个变量的话，会在整个类里面找，类整体是一个作用域叫做 - 类域</li> </ul> <h3> <a id="13__96" rel="nofollow"></a>1.3 类的使用方法：</h3> <pre><code class="prism language-cpp"><span class="token keyword">class</span> <span class="token class-name">className</span> <span class="token punctuation">{<!-- --></span>  <span class="token comment">// 类体：由成员函数和成员变量组成</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 一定要注意后面的分号</span> </code></pre> <ul> <li> <strong>class</strong>为定义类的<strong>关键字</strong>，<strong>ClassName为类的名字</strong>，<strong>{}中为类的主体</strong>，注意类定义结束时后面分号不能省略。</li> <li>类体中内容称为<strong>类的成员</strong>：<strong>类中的变量</strong>称为<strong>类的属性或成员变量</strong>; <strong>类中的函数</strong>称为<strong>类的方法或者成员函数</strong>。</li> </ul> <p>1.<strong>class的由来：</strong></p> <ul> <li>C++一开始叫C with classes</li> <li>一开始的类是用struct来引入的</li> </ul> <p>2.<strong>C++兼容C struct的用法：</strong></p> <ul> <li>C++同时对struct进行了升级，<strong>把struct升级成了类</strong> </li> <li><strong>结构体的名称可以做类型</strong></li> <li>里面可以定义函数</li> </ul> <p><strong><font color="blue">C++同时对struct进行了升级，把struct升级成了类：</font></strong></p> <pre><code class="prism language-cpp"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">int</span> val<span class="token punctuation">;</span> 	<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token comment">//C语言，这个位置必须这样写，C++兼容C的用法也可以这样写</span> 	ListNode<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token comment">//但是C++还可以这样写，升级以后的用法，这个名称代表类型</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre> <blockquote> <p><strong>C++一般不需要对结构体进行typedef了</strong>，C++将struct升级之后，<strong>直接用类名代替整个类型</strong>。</p> </blockquote> <p><strong><font color="red">虽然C++可以用struct，但是C++更喜欢class。</font></strong></p> <p>3.<strong>struct 和 class的区别：</strong></p> <ul> <li>struct 不加访问限定符，<font color="blue">默认是public（共有的）</font> </li> <li>class 不加访问限定符，<font color="blue">默认是private（私有的）</font> </li> </ul> <p><strong>类的使用如下：</strong></p> <pre><code class="prism language-cpp"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> gender<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token function">strcpy</span><span class="token punctuation">(</span>_name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不加_这里就区分不开了</span> 		<span class="token function">strcpy</span><span class="token punctuation">(</span>_gender<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">;</span> 		_age <span class="token operator">=</span> age<span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  	<span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		cout <span class="token operator">&lt;&lt;</span> _name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> _gender <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> _age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  	<span class="token comment">//这里并不是必须加_</span> 	<span class="token comment">//习惯加这个，用来标识成员变量</span> <span class="token keyword">private</span><span class="token operator">:</span> 	<span class="token keyword">char</span> _name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 	<span class="token keyword">char</span> _gender<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token comment">//struct Student s1;</span>  	<span class="token comment">//类定义的对象</span> 	Student s2<span class="token punctuation">;</span> 	s2<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	s2<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token comment">//cout &lt;&lt; s2._name &lt;&lt; endl;</span>  	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p>4.<strong>格式习惯：</strong></p> <ul> <li>成员变量并<strong>不是必须加_</strong> </li> <li><strong>习惯加_，是用来标识成员变量</strong></li> <li>当成员函数要用赋值的时候，需要改形参比较麻烦</li> <li>这样只是一种好的习惯，要用来区分，避免歧义</li> <li>成员变量最好前面带个_，或者后面带个_，和成员的变量区分</li> <li>有的地方命名成m_,或者是m后面带下个单词首字母大写，都可以</li> </ul> <p>5.<strong>使用习惯：</strong></p> <ul> <li>C++中就不将s2叫做<strong>变量</strong>了，C++中将其叫做<strong>对象</strong> </li> <li>使用方法和C语言中的结构体并无二异，通过 <strong>“.”</strong> 操作符或者 <strong>“-&gt;”</strong> </li> <li><strong>成员变量可以定在函数的下面或者函数的上面，中间也行</strong></li> <li><strong>在类的任意位置都行，这里访问成员变量不受影响</strong></li> <li>普通的是向上找，类不会，<strong>类是一个整体</strong> </li> </ul> <p>6.<strong>用类创造对象：</strong></p> <ul> <li>对象就像是房子一样</li> <li>而类就像是造房子时要的图纸</li> <li>一张图纸可以造出多个房子，所以<strong>一个类可以创造出多个对象</strong> </li> <li>用类的类型创造一个对象的过程是，<strong>称为类的实例化</strong> </li> </ul> <hr/> </h1> <h3> <a id="21__195" rel="nofollow"></a>2.1 如何内存对齐：</h3> <p><font color="green"><strong>一个类所创建的对象大小该如何计算呢？</strong></font></p> <p>1.<strong>类和结构体一样成员之间要考虑内存对齐</strong></p> <ul> <li>类和结构体的内存对齐是一致的</li> <li><strong>空类或者是没有成员变量的类要给一个字节的空间占位</strong></li> </ul> <p><strong><font color="purple">那么结构体的内存对齐是如何对齐的呢？下面我们就好好讲一讲结构体和类中成员的内存是如何对齐的：</font></strong></p> <p><font color="red"><strong>结构体和类的内存对齐规则：</strong></font></p> <p>(1) 第一个成员在与<strong>结构体变量偏移量为0的地址处</strong>。<br /> (2) 其他成员变量要<strong>对齐到某个数字（对齐数）的整数倍的地址处</strong>。</p> <p><font color="red"><strong>对齐数 = “编译器默认的一个对齐数” 与 “该成员大小“ 的较小值</strong></font></p> <p><font color="green"><strong>VS中默认的值为8：</strong></font></p> <p>(1) <strong>结构体总大小</strong>为<strong>最大对齐数</strong>（每个成员变量都有一个对齐数）的<strong>整数倍。</strong><br /> (2) 如果嵌套了结构体的情况，<strong>嵌套的结构体对齐到自己的最大对齐数的整数（地址）倍处</strong>，<strong>结构体的整体大小</strong>就是<strong>所有最大对齐数</strong>（含嵌套结构体的对齐数）的<strong>整数倍</strong>。</p> <hr/> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230119/ccdd5ce94ae4d6149786c6b52199b549.jpg" alt="【C++】类和对象 — 初识类和对象（上篇）"></p> <hr/> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230119/4f77233a0c53da8696e8bb24ad08a8ce.jpg" alt="【C++】类和对象 — 初识类和对象（上篇）"><br /><font color="red"><strong>注意：</strong></font></p> <p><strong>类是对对象进行描述的，是一个模型一样的东西，限定了类有哪些成员，<font color="orange">定义出一个类并没有分配实际的内存空间来存储它。</font></strong></p> <p><font color="blue"><strong>结构体的大小或类的大小，实际上不是它们自身的大小，而是用它们创造出来对象所占内存的大小</strong></font></p> <blockquote> <p>类或者是结构体中的<strong>成员变量和成员函数只是声明</strong><br /><strong>并没有在类里面开空间</strong>，它们在类中只是一个承诺，承诺有这个变量或者是函数的存在</p> </blockquote> <p><strong><font color="red">真正存放类中变量的地方是用类实例化出来的对象，只有对象创建出来之后才会开空间。</font></strong></p> <h3> <a id="22__228" rel="nofollow"></a>2.2 成员函数存储位置：</h3> <p>1.<strong>成员函数存放的位置在哪？</strong></p> <p>(1)<strong>假如成员函数存放在类创建的对象中的话，会有缺陷</strong></p> <ul> <li>每个对象中<strong>成员变量是不同的，但是调用同一份函数</strong> </li> <li>如果按照此种方式存储，当一个类创建多个对象时，<strong>每个对象中都会保存一份代码</strong> </li> </ul> <p>(2)<font color="red"><strong>缺陷：</strong></font></p> <ul> <li><strong>相同代码保存多次，浪费空间！</strong></li> </ul> <p>(3)<strong>代码演示：</strong></p> <p><font color="blue">用下述代码来算一下函数到底是不是创建在类实例化的对象中：</font></p> <pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">Date</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token keyword">void</span> <span class="token function">Inint</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		_year <span class="token operator">=</span> year<span class="token punctuation">;</span> 		_month <span class="token operator">=</span> month<span class="token punctuation">;</span> 		_day <span class="token operator">=</span> day<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token keyword">private</span><span class="token operator">:</span> 	<span class="token keyword">int</span> _year<span class="token punctuation">;</span> 	<span class="token keyword">int</span> _month<span class="token punctuation">;</span> 	<span class="token keyword">int</span> _day<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Date d1<span class="token punctuation">;</span> 	Date d2<span class="token punctuation">;</span>  	d1<span class="token punctuation">.</span><span class="token function">Inint</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	d2<span class="token punctuation">.</span><span class="token function">Inint</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p><font color="green"><strong>代码的运行结果是12</strong></font></p> <p><strong>解释：</strong></p> <ul> <li>根据我们之前讲的结构体或类的<strong>内存对齐</strong>发现这个结果<strong>刚好是三个int类型内存对齐的结果</strong> </li> <li>结果显然告诉我们<strong>函数不是存放在类实例化的对象中的</strong> </li> </ul> <p><strong>反汇编演示：</strong><br /><img decoding="async" src="http://img.555519.xyz/uploads/20230119/3a292c3da164019a7e01f65bde8b38ac.jpg" alt="【C++】类和对象 — 初识类和对象（上篇）"><br /><strong><font color="purple">查看了一下汇编，发现d1和d2调用的Print函数的地址是相同的，它们调用的函数地址相同，是同一个函数</font></strong></p> <p>(4)<strong>成员函数真正存放的位置</strong></p> <ul> <li>在之前C语言学习的时候我们知道，内存划分的时候，将其划分为：<font color="red"><strong>栈，堆，静态区，数据段，代码段…</strong></font> </li> <li><font color="red"><strong>成员函数就是存在代码段中的</strong></font></li> <li>每次调用的都是同一个函数所以<strong>只要存一份</strong> </li> <li><strong>每次都去代码段去调用就可以了，就避免了浪费空间</strong></li> <li> <font color="green"><strong>所以类对象的内存对齐是不用考虑成员函数的</strong></font><br /><img decoding="async" src="http://img.555519.xyz/uploads/20230119/ef7630da2a7adf854622918eeda442ab.jpg" alt="【C++】类和对象 — 初识类和对象（上篇）"> </li> </ul> <p>2.<strong>空类的大小：</strong></p> <p>(1)<strong>代码演示：</strong></p> <pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">Date</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">private</span><span class="token operator">:</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Date d1<span class="token punctuation">;</span>  	cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p><strong>运行结果是1</strong></p> <p>(2)<strong>总结：</strong></p> <ul> <li>没有成员变量的类对象，编译会给它们分配1byte占位</li> <li>或者是当类中仅有成员函数时</li> <li><strong>大小不是为了存储有效数据，而是为了占位，表示对象存在过</strong></li> </ul> <hr/> </h1> <h3> <a id="31_this_323" rel="nofollow"></a>3.1 this指针的使用和特性：</h3> <p><font color="green"><strong>先来看一个日期类：</strong></font></p> <pre><code class="prism language-cpp"><span class="token keyword">class</span> <span class="token class-name">Date</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		cout <span class="token operator">&lt;&lt;</span> _year <span class="token operator">&lt;&lt;</span> <span class="token string">"-"</span> <span class="token operator">&lt;&lt;</span> _month <span class="token operator">&lt;&lt;</span> <span class="token string">"-"</span> <span class="token operator">&lt;&lt;</span> _day <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  	 	<span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		_year <span class="token operator">=</span> year<span class="token punctuation">;</span> 		_month <span class="token operator">=</span> month<span class="token punctuation">;</span> 		_day <span class="token operator">=</span> day<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token keyword">private</span><span class="token operator">:</span> 	<span class="token keyword">int</span> _year<span class="token punctuation">;</span> <span class="token comment">// 年</span> 	<span class="token keyword">int</span> _month<span class="token punctuation">;</span> <span class="token comment">// 月</span> 	<span class="token keyword">int</span> _day<span class="token punctuation">;</span> <span class="token comment">// 日</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Date d1<span class="token punctuation">;</span> 	d1<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	Date d2<span class="token punctuation">;</span> 	d2<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	d1<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	d2<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p>1.<strong>问题来了，d1调用Print函数的时候是如何得知打印的就是d1对象的成员变量的呢？同样的问题，d2呢？它们并没有传任何参数，是如何做到的呢？</strong></p> <ul> <li>事实上C++悄悄咪咪的新增了一个this指针，<strong>隐含的this指针</strong> </li> <li><strong>this也是C++的一个关键字</strong></li> </ul> <blockquote> <p>C++中通过引入this指针解决该问题，即：C++编译器给每个“<strong>非静态的成员函数“增加了一个隐藏的指针参数，让该指针指向当前对象(函数运行时调用该函数的对象)，在函数体中所有“成员变量”的操作，都是通过该指针去访问。只不过所有的操作对用户是透明的，即用户不需要来传递，编译器自动完成。</strong></p> </blockquote> <p>2.<strong>实际上的调用如下代码：</strong></p> <pre><code class="prism language-cpp"><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span>Date<span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>_year <span class="token operator">&lt;&lt;</span> <span class="token string">"-"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>_month <span class="token operator">&lt;&lt;</span> <span class="token string">"-"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>_day <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>  d1<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span> d2<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <ul> <li>this指针是一个隐含的形参</li> <li><strong>this指针是不能被修改的，被const修饰过了，但是this指针指向的对象 是可以被修改的</strong></li> </ul> <p>3.<strong>this指针的特性：<font color="red">（重点）</font></strong></p> <p>(1) <strong>this指针的类型：类类型</strong> * <strong>const，即成员函数中，不能给this指针赋值。</strong></p> <p>(2) 只能在“成员函数”的内部使用</p> <p>(3)<strong>this指针本质上是“成员函数”的形参</strong>，当对象调用成员函数时，将对象地址作为实参传递给this形参。<strong>所以对象中不存储this指针。</strong></p> <p>(4)<strong>this指针是“成员函数”第一个隐含的指针形参，一般情况由编译器通过ecx寄存器自动传递，不需要用户传递</strong></p> <p>4.<strong>如果显式得去写的话就会报错:</strong><font color="red"><strong>（错误写法）</strong></font></p> <ul> <li>d1.Init(&amp;d1, 2022, 5, 15);</li> <li>d2.Init(&amp;d2, 2022, 5, 20);</li> </ul> <p><font color="black"><strong>编译器实际上是就是上那样传的指针，但是不能人为显示写出来，不然会报错</strong></font></p> <h3> <a id="32_this_397" rel="nofollow"></a>3.2 两道面试题巩固this指针：</h3> <p><font color="blue">(1)下面程序编译运行结果是？ A、编译报错 B、运行崩溃 C、正常运行</font></p> <pre><code class="prism language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token comment">//this指针可以是空 - 这里的this指针就是空指针</span> 		<span class="token comment">//const指针不能被修改但是可以被初始化</span> 		cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Show()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token keyword">private</span><span class="token operator">:</span> 	<span class="token keyword">int</span> _a<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token comment">//对象里面只有成员变量，没有成员函数</span> 	A<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> 	p<span class="token operator">-&gt;</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	     <span class="token keyword">return</span> <span class="token number">0</span>； <span class="token punctuation">}</span> </code></pre> <p><font color="red"><strong>答案选：C</strong></font></p> <hr/> <p><strong>补充：</strong></p> <p><font color="black"><strong>编译器实际上是p-&gt;Print ( p ) 这样子传的指针的，但是不能人为显示写出来，不然会报错</strong></font></p> <p><strong>解释：</strong></p> <ul> <li><strong>p是一个A类型的指针变量，其值是nullptr</strong></li> </ul> <p><font color="green"><strong>p-&gt;Show()这个是没有解引用的：</strong></font></p> <ul> <li><strong>这个函数不在对象里面，在公共的代码区域，和普通函数调用时一样的</strong></li> <li><strong>不存在去指针指向的空间找函数成员，因为函数成员在代码段</strong></li> </ul> <p><font color="green"><strong>p-&gt;_a = 0这个是有解引用的：</strong></font></p> <ul> <li><strong>去指针指向的空间找成员变量，因为是访问空指针所以就会报错</strong></li> <li><strong>因为空指针是不能够解引用的</strong></li> </ul> <hr/> <p><font color="blue">(2)下面程序编译运行结果是？ A、编译报错 B、运行崩溃 C、正常运行</font></p> <pre><code class="prism language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token keyword">void</span> <span class="token function">PrintA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token comment">//cout &lt;&lt; this-&gt;_a</span> 		cout <span class="token operator">&lt;&lt;</span> _a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token keyword">private</span><span class="token operator">:</span> 	<span class="token keyword">int</span> _a<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	A<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> 	p<span class="token operator">-&gt;</span><span class="token function">PrintA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p><font color="red"><strong>答案选：B</strong></font></p> <p><strong>补充：</strong></p> <p><strong>所有的空指针问题和野指针问题都是在 “运行阶段” 暴露出来的，在 “编译阶段” 是检查不出来的，所以首先排除A</strong></p> <p><strong>解释：</strong></p> <ul> <li>p-&gt;PrintA()此时调用成员函数时传过去的指针是nullptr</li> <li> <strong>this指针是空指针</strong>，但是在 <strong>cout &lt;&lt; _a &lt;&lt; endl;这一步出问题了</strong> </li> <li>因为它其实是<strong>cout &lt;&lt; this-&gt;_a &lt;&lt; endl;这里是对空指针的解引用</strong> </li> <li>空指针解引用就会报错</li> </ul> <hr/> <h3> <a id="33_this_475" rel="nofollow"></a>3.3 this指针的存储位置：</h3> <p>1.<strong>this指针是存在哪里的？</strong></p> <ul> <li>this指针是存在栈区的，因为它作为形参，是在函数的栈帧，所以是属于栈</li> <li>一般是在栈区，有些编译器会使用寄存器优化，因为在函数里面要频繁的使用这个指针，寄存器很快</li> </ul> <p><strong>补充nullptr：</strong></p> <ul> <li>空指针一定是0这个位置的地址，但不是物理内存0位置的地址(虚拟地址进程地址空间)</li> <li>物理内存不需要划分，物理地址是给任意程序映射的</li> <li>我们平时的内存划分是虚拟内存不是电脑上的物理内存</li> <li>空指针是一个确定存在的地址</li> <li>空指针的位置是预留出来的，那个位置不存储任何东西，不能对这个地方进行访问</li> </ul> <p>(补充可能有误，学业不精，若有错望大佬多多指点)????????????????</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-65991.htm">动物医院名字有创意两个字的吗英文（动物医院名字有创意两个字的吗英文怎么说）</a></p>
                                        <p>下一个：<a href="/news/article-66601.htm">卖一吨饲料一般利润多少 开个饲料加工厂需要投资多少钱</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-66600.htm" title="【C++】类和对象 — 初识类和对象（上篇）">【C++】类和对象 — 初识类和对象（上篇）</a></li>
                        <li class="py-2"><a href="/news/article-50080.htm" title="芜湖宠物猫店（芜湖宠物猫店地址）">芜湖宠物猫店（芜湖宠物猫店地址）</a></li>
                        <li class="py-2"><a href="/news/article-38164.htm" title="Vue基础之Vue列表渲染">Vue基础之Vue列表渲染</a></li>
                        <li class="py-2"><a href="/news/article-63515.htm" title="宠物狗领养免费 宠物狗领养免费领养宠物的网站">宠物狗领养免费 宠物狗领养免费领养宠物的网站</a></li>
                        <li class="py-2"><a href="/news/article-49566.htm" title="家有儿女新传电视剧（家有儿女新传第100集）">家有儿女新传电视剧（家有儿女新传第100集）</a></li>
                        <li class="py-2"><a href="/news/article-45597.htm" title="宠康动物医院是连锁的吗还是加盟（宠康宠物）">宠康动物医院是连锁的吗还是加盟（宠康宠物）</a></li>
                        <li class="py-2"><a href="/news/article-38656.htm" title="1970年农历四月二十二日命运好吗（1970年农历4月20日出生命运）">1970年农历四月二十二日命运好吗（1970年农历4月20日出生命运）</a></li>
                        <li class="py-2"><a href="/news/article-40152.htm" title="扬州收费合理的宠物医院（扬州正规的宠物医院）">扬州收费合理的宠物医院（扬州正规的宠物医院）</a></li>
                        <li class="py-2"><a href="/news/article-58846.htm" title="解决Vue Cli安装Element-plus后启动失败的问题">解决Vue Cli安装Element-plus后启动失败的问题</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-5-free-clash-meta-node.htm" title="「1月5日」最高速度19.7M/S，2025年Clash Meta Github每天更新免费机场订阅节点链接">「1月5日」最高速度19.7M/S，2025年Clash Meta Github每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">15</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div> <!-- /.container -->
    </div> <!-- /.untree_co-section -->
        <div class="site-footer">
        <div class="footer-dots"></div> <!-- /.footer-dots -->
        <div class="container">
            <div class="row mt-5">
                <div class="col-12 text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>
                        <a href="/">Clash Meta Github节点订阅官网</a> 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div> <!-- /.container -->
    </div> <!-- /.site-footer -->
    <div id="overlayer"></div>
    <div class="loader">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <script src="/assets/website/js/frontend/clashmetagithub/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/clashmetagithub/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/website/js/frontend/clashmetagithub/popper.min.js"></script>
    <script src="/assets/website/js/frontend/clashmetagithub/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/clashmetagithub/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/clashmetagithub/jquery.easing.1.3.js"></script>
    <script src="/assets/website/js/frontend/clashmetagithub/jquery.animateNumber.min.js"></script>
    <script src="/assets/website/js/frontend/clashmetagithub/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/clashmetagithub/jquery.fancybox.min.js"></script>
    <script src="/assets/website/js/frontend/clashmetagithub/aos.js"></script>
    <script src="/assets/website/js/frontend/clashmetagithub/custom.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>